# Generated by Django 3.2 on 2022-10-18 17:12

from django.db import migrations, models
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BuildUpTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateCreate', models.DateTimeField(auto_now_add=True)),
                ('DateStart', models.DateTimeField(blank=True)),
                ('DateEnd', models.DateTimeField(blank=True)),
                ('Duration', models.FloatField(blank=True, null=True, verbose_name='Duration')),
                ('DataVector', models.CharField(blank=True, max_length=50, null=True, verbose_name='Data Vector')),
                ('Permeability', models.FloatField(blank=True, null=True, verbose_name='Permeability')),
                ('Skin', models.FloatField(blank=True, null=True, verbose_name='Skin')),
                ('Iterated', models.FloatField(blank=True, null=True, verbose_name='Iterated')),
                ('Extrapolated', models.FloatField(blank=True, null=True, verbose_name='Extrapolated')),
            ],
            options={
                'verbose_name': 'Build Up Test',
                'verbose_name_plural': 'Build Up Test',
            },
        ),
        migrations.CreateModel(
            name='ESPData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateCreate', models.DateTimeField(auto_now_add=True)),
                ('MotorCurrent', models.FloatField(blank=True, null=True, verbose_name='Motor Current')),
                ('MotorVoltage', models.FloatField(blank=True, null=True, verbose_name='Motor Voltage')),
                ('MotorPower', models.FloatField(blank=True, null=True, verbose_name='Motor Power')),
                ('MotorTemperature', models.FloatField(blank=True, null=True, verbose_name='Motor Temperature')),
                ('MotorFrequency', models.FloatField(blank=True, null=True, verbose_name='Motor Frequency')),
                ('HeadPressure', models.FloatField(blank=True, null=True, verbose_name='Head Pressure')),
                ('HeadTemperature', models.FloatField(blank=True, null=True, verbose_name='Head Temperature')),
                ('CasingPressure', models.FloatField(blank=True, null=True, verbose_name='Casing Pressure')),
                ('FlowlinePressure', models.FloatField(blank=True, null=True, verbose_name='Flowline Pressure')),
                ('PumpIntakePressure', models.FloatField(blank=True, null=True, verbose_name='Pump Intake Pressure')),
            ],
            options={
                'verbose_name': 'Electric Submersible Pump Data',
                'verbose_name_plural': 'All Electric Submersible Pump Data',
            },
        ),
        migrations.CreateModel(
            name='ESPEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateCreate', models.DateTimeField(blank=True)),
                ('WellEvent', models.CharField(choices=[('Normal Flow', 'Normal Flow'), ('Pumping Off', 'Pumping Off'), ('No Flow Condition', 'No Flow Condition'), ('Broken Shaft', 'Broken Shaft'), ('Off', 'Off'), ('Abnormal flow', 'Abnormal Off'), ('Flow Decreased', 'Flow Decreased'), ('Flow Increased', 'Flow Increased')], default='Normal Flow', max_length=50, verbose_name='Well Event')),
                ('WellDiagnosis', models.CharField(choices=[('Normal', 'Normal'), ('Gas Interference Traces', 'Gas Interference Traces'), ('Gas Interference Light', 'Gas Interference Light'), ('Gas Interference Medium', 'Gas Interference Medium'), ('Gas Interference High', 'Gas Interference High'), ('Gas Interference Severe', 'Gas Interference Severe'), ('Gas Lock', 'Gas Lock'), ('Gas Lock Severe', 'Gas Lock Severe')], default='Normal Flow', max_length=50, verbose_name='Well Diagnosis')),
                ('WellPrediction', models.FloatField(blank=True, null=True, verbose_name='Well Prediction')),
                ('EI', models.FloatField(blank=True, null=True, verbose_name='E. I.')),
                ('WellRecomendation', models.CharField(blank=True, max_length=50, null=True, verbose_name='Well Recomendation')),
                ('WellTripAttendant', models.CharField(blank=True, max_length=50, null=True, verbose_name='Well Trip Attendant')),
                ('FrequencySetPoint', models.FloatField(blank=True, null=True, verbose_name='Frequency SetPoint')),
                ('ChokeOpeningSetpoint', models.FloatField(blank=True, null=True, verbose_name='Choke Opening Setpoint')),
                ('TTT', models.FloatField(blank=True, null=True, verbose_name='Time To Trip')),
            ],
            options={
                'verbose_name': 'ESP Event',
                'verbose_name_plural': 'ESP Events',
            },
        ),
        migrations.CreateModel(
            name='RodPumpData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateCreate', models.DateTimeField(auto_now_add=True)),
                ('LoadPump', models.TextField(blank=True, null=True, verbose_name='Load')),
                ('Position', models.TextField(blank=True, null=True, verbose_name='Position')),
                ('Acceleration', models.TextField(blank=True, null=True, verbose_name='Acceleration')),
                ('HeadPressure', models.FloatField(blank=True, null=True, verbose_name='Head Pressure')),
                ('HeadTemperature', models.FloatField(blank=True, null=True, verbose_name='Head Temperature')),
                ('CasingPressure', models.FloatField(blank=True, null=True, verbose_name='Casing Pressure')),
                ('ChokeOpening', models.FloatField(blank=True, null=True, verbose_name='Choke Opening')),
                ('SPM', models.FloatField(blank=True, null=True, verbose_name='SPM')),
                ('Diagnosis', multiselectfield.db.fields.MultiSelectField(choices=[('None', 'None'), ('Full pump', 'Full pump'), ('Leak travel valve', 'Leak travel valve'), ('Leak standing valve', 'Leak standing valve'), ('Worn pump barrel', 'Worn pump barrel'), ('Light fluid stroke', 'Light fluid stroke'), ('Medium fluid stroke', 'Medium fluid stroke'), ('Severe fluid stroke', 'Severe fluid stroke'), ('Gas interference', 'Gas interference'), ('Shock of pump up', 'Shock of pump up'), ('Shock of pump down', 'Shock of pump down')], max_length=181, verbose_name='Diagnosis')),
                ('PumpFill', models.FloatField(blank=True, null=True, verbose_name='Pump Fill')),
                ('Recomendation', multiselectfield.db.fields.MultiSelectField(choices=[('Good work area', 'Good work area'), ('Schedule to workover', 'Schedule to workover'), ('Unit re-spacing', 'Unit re-spacing'), ('Reduce strokes per minute', 'Reduce strokes per minute'), ('Stop pump unit', 'Stop pump unit'), ('Aply gle eliminator', 'Aply gle eliminator')], max_length=112, verbose_name='Recomendation')),
            ],
            options={
                'verbose_name': 'Socker Rod Pump Data',
                'verbose_name_plural': 'All Socker Rod Pump Data',
            },
        ),
        migrations.CreateModel(
            name='SampleTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateCreate', models.DateTimeField(auto_now_add=True)),
                ('DateTest', models.DateTimeField(blank=True)),
                ('WaterCut', models.FloatField(blank=True, null=True, verbose_name='Water Cut')),
                ('SandPercentage', models.FloatField(blank=True, null=True, verbose_name='Sand Percentage')),
                ('EmultionPercentage', models.FloatField(blank=True, null=True, verbose_name='Emultion Percentage')),
            ],
            options={
                'verbose_name': 'Sample Test',
                'verbose_name_plural': 'Sample Test',
            },
        ),
        migrations.CreateModel(
            name='WellTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DateCreate', models.DateTimeField(auto_now_add=True)),
                ('DateStart', models.DateField()),
                ('DateEnd', models.DateField()),
                ('Duration', models.FloatField(blank=True, null=True, verbose_name='Duration')),
                ('OilRate', models.FloatField(blank=True, null=True, verbose_name='Oil Rate')),
                ('WaterRate', models.FloatField(blank=True, null=True, verbose_name='Water Rate')),
                ('GasRate', models.FloatField(blank=True, null=True, verbose_name='Gas Rate')),
            ],
            options={
                'verbose_name': 'Well Testing',
                'verbose_name_plural': 'Well Testing',
            },
        ),
    ]
